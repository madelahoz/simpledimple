{
    "width": 590,
    "height": 400,
    "bounds": {
        "x": 60,
        "y": 30,
        "width": 420,
        "height": 330
    },
    "axes": [
        {
            "position": "x",
            "measure": ["Price"]
        },
        {
            "position": "y",
            "measure": "Sales Value"
        }
    ],
    "series": [
        {
            "categoryFields": ["SKU", "Channel", "Owner"],
            "plot": "bubble"
        }
    ],
    "legends": [
        {
            "x": 530,
            "y": 100,
            "width": 60,
            "height": 300,
            "horizontalAlign": "right"
        }
    ],
    "afterDraw": "var chart = simpledimple._chart, data = simpledimple.data;\n\n// This block simply adds the legend title. I put it into a d3 data\n// object to split it onto 2 lines.  This technique works with any\n// number of lines, it isn't dimple specific.\nchart.svg.selectAll(\"title_text\")\n  .data([\"Click legend to\",\"show/hide owners:\"])\n  .enter()\n  .append(\"text\")\n    .attr(\"x\", 499)\n    .attr(\"y\", function (d, i) { return 90 + i * 14; })\n    .style(\"font-family\", \"sans-serif\")\n    .style(\"font-size\", \"10px\")\n    .style(\"color\", \"Black\")\n    .text(function (d) { return d; });\n\n// Get a unique list of Owner values to use when filtering\nvar filterValues = dimple.getUniqueValues(data, \"Owner\");\n// Get all the rectangles from our now orphaned legend\nchart.legends[0].shapes.selectAll(\"rect\")\n  // Add a click event to each rectangle\n  .on(\"click\", function (e) {\n    // This indicates whether the item is already visible or not\n    var hide = false;\n    var newFilters = [];\n    // If the filters contain the clicked shape hide it\n    filterValues.forEach(function (f) {\n      if (f === e.aggField.slice(-1)[0]) {\n        hide = true;\n      } else {\n        newFilters.push(f);\n      }\n    });\n    // Hide the shape or show it\n    if (hide) {\n      d3.select(this).style(\"opacity\", 0.2);\n    } else {\n      newFilters.push(e.aggField.slice(-1)[0]);\n      d3.select(this).style(\"opacity\", 0.8);\n    }\n    // Update the filters\n    filterValues = newFilters;\n    // Filter the data\n    chart.data = dimple.filterData(data, \"Owner\", filterValues);\n    // Passing a duration parameter makes the chart animate. Without\n    // it there is no transition\n    simpledimple.chart = chart.draw(800);\n  });\n  // This is a critical step.  By doing this we orphan the legend. This\n  // means it will not respond to graph updates.  Without this the legend\n  // will redraw when the chart refreshes removing the unchecked item and\n  // also dropping the events we define below.\n  chart.legends = [];\n\n"
}
