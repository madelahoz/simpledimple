{
    "width": 590,
    "height": 400,
    "bounds": {
        "x": 60,
        "y": 40,
        "width": 500,
        "height": 320
    },
    "axes": [
        {
            "position": "x",
            "categoryFields": ["Brand"]
        },
        {
            "position": "y",
            "measure": "Unit Sales"
        },
        {
            "position": "z",
            "measure": "Sales Value"
        }
    ],
    "series": [
        {
            "categoryFields": ["SKU", "Brand"],
            "plot": "bubble",
            "eventHandlers": [
                {
                    "event": "mouseover",
                    "handler":"        // Get the properties of the selected shape\n        var cx = parseFloat(e.selectedShape.attr(\"cx\")),\n            cy = parseFloat(e.selectedShape.attr(\"cy\")),\n            r = parseFloat(e.selectedShape.attr(\"r\")),\n            fill = e.selectedShape.attr(\"fill\"),\n            stroke = e.selectedShape.attr(\"stroke\");\n\n        // Set the size and position of the popup\n        var width = 150,\n            height = 100,\n            x = (cx + r + width + 10 < chart.svg.attr(\"width\") ?\n                  cx + r + 10 :\n                  cx - r - width - 20);\n            y = (cy - height / 2 < 0 ?\n                  15 :\n                  cy - height / 2);\n\n        // Fade the popup fill mixing the shape fill with 80% white\n        var popupFillColor = d3.rgb(\n                    d3.rgb(fill).r + 0.8 * (255 - d3.rgb(fill).r),\n                    d3.rgb(fill).g + 0.8 * (255 - d3.rgb(fill).g),\n                    d3.rgb(fill).b + 0.8 * (255 - d3.rgb(fill).b)\n                );\n\n        // Create a group for the popup objects\n        popup = chart.svg.append(\"g\");\n\n        // Add a rectangle surrounding the chart\n        popup\n          .append(\"rect\")\n          .attr(\"x\", x + 5)\n          .attr(\"y\", y - 5)\n          .attr(\"width\", width)\n          .attr(\"height\", height)\n          .attr(\"rx\", 5)\n          .attr(\"ry\", 5)\n          .style(\"fill\", popupFillColor)\n          .style(\"stroke\", stroke)\n          .style(\"stroke-width\", 2);\n\n        // Add the series value text\n        popup\n          .append(\"text\")\n          .attr(\"x\", x + 10)\n          .attr(\"y\", y + 10)\n          .text(e.seriesValue[0])\n          .style(\"font-family\", \"sans-serif\")\n          .style(\"font-size\", 10)\n          .style(\"fill\", stroke);\n\n        // Filter the data for the selected brand and sku\n        var hoverData = dimple.filterData(data, \"Brand\", e.xValue);\n        hoverData = dimple.filterData(hoverData, \"SKU\", e.seriesValue);\n\n        // Create a new mini chart of Unit Sales over Months\n        tipChart = new dimple.chart(chart.svg,  hoverData);\n        tipChart.setBounds(x + 10, y + 30, width - 10, height - 40);\n        tipChart.addCategoryAxis(\"x\", \"Date\").hidden = true;\n        tipChart.addMeasureAxis(\"y\", \"Unit Sales\").hidden = true;\n\n        // Add a bar series, this can be changed to a line, area or bubble\n        // by changing the plot parameter accordingly.\n        var popUpSeries = tipChart.addSeries(\"SelectedSeries\", dimple.plot.bar);\n\n        // Set the gap to 80% - just a style preference\n        popUpSeries.barGap = 0.8;\n\n        // Set the color to the stroke color of the selected node\n        tipChart.assignColor(\"SelectedSeries\", stroke, stroke);\n\n        // Draw the mini chart\n        tipChart.draw();\n\n        // save for reference in onleave\n        userData.tipChart = tipChart;\n        userData.popup = popup;\n"
                },
                {
                    "event": "mouseleave",
                    "handler":"        var tipChart = userData.tipChart;\n        var popup = userData.popup;\n        // Remove the chart\n        if (tipChart !== null) {\n          tipChart._group.remove();\n        }\n        // Remove the popup\n        if (popup !== null) {\n          popup.remove();\n        }\n"
                }
            ]
        }
    ]
}
